// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.9
// source: cloudsaveValidatorService.proto

package validator

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TTLConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
	Action    string                 `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *TTLConfig) Reset() {
	*x = TTLConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTLConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTLConfig) ProtoMessage() {}

func (x *TTLConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTLConfig.ProtoReflect.Descriptor instead.
func (*TTLConfig) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{0}
}

func (x *TTLConfig) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *TTLConfig) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type GameRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Namespace string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Payload   []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	SetBy     string                 `protobuf:"bytes,4,opt,name=setBy,proto3" json:"setBy,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updatedAt,proto3,oneof" json:"updatedAt,omitempty"`
	TtlConfig *TTLConfig             `protobuf:"bytes,7,opt,name=ttlConfig,proto3,oneof" json:"ttlConfig,omitempty"`
}

func (x *GameRecord) Reset() {
	*x = GameRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRecord) ProtoMessage() {}

func (x *GameRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRecord.ProtoReflect.Descriptor instead.
func (*GameRecord) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{1}
}

func (x *GameRecord) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GameRecord) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GameRecord) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *GameRecord) GetSetBy() string {
	if x != nil {
		return x.SetBy
	}
	return ""
}

func (x *GameRecord) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GameRecord) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GameRecord) GetTtlConfig() *TTLConfig {
	if x != nil {
		return x.TtlConfig
	}
	return nil
}

type BulkGameRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameRecords []*GameRecord `protobuf:"bytes,1,rep,name=gameRecords,proto3" json:"gameRecords,omitempty"`
}

func (x *BulkGameRecord) Reset() {
	*x = BulkGameRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkGameRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkGameRecord) ProtoMessage() {}

func (x *BulkGameRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkGameRecord.ProtoReflect.Descriptor instead.
func (*BulkGameRecord) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{2}
}

func (x *BulkGameRecord) GetGameRecords() []*GameRecord {
	if x != nil {
		return x.GameRecords
	}
	return nil
}

type PlayerRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key             string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Namespace       string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Payload         []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	SetBy           string                 `protobuf:"bytes,4,opt,name=setBy,proto3" json:"setBy,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UserId          string                 `protobuf:"bytes,6,opt,name=userId,proto3" json:"userId,omitempty"`
	IsPublic        bool                   `protobuf:"varint,7,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updatedAt,proto3,oneof" json:"updatedAt,omitempty"`
	RequesterUserId *string                `protobuf:"bytes,9,opt,name=requesterUserId,proto3,oneof" json:"requesterUserId,omitempty"`
}

func (x *PlayerRecord) Reset() {
	*x = PlayerRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRecord) ProtoMessage() {}

func (x *PlayerRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRecord.ProtoReflect.Descriptor instead.
func (*PlayerRecord) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerRecord) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PlayerRecord) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PlayerRecord) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PlayerRecord) GetSetBy() string {
	if x != nil {
		return x.SetBy
	}
	return ""
}

func (x *PlayerRecord) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PlayerRecord) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PlayerRecord) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *PlayerRecord) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PlayerRecord) GetRequesterUserId() string {
	if x != nil && x.RequesterUserId != nil {
		return *x.RequesterUserId
	}
	return ""
}

type BulkPlayerRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerRecords []*PlayerRecord `protobuf:"bytes,1,rep,name=playerRecords,proto3" json:"playerRecords,omitempty"`
}

func (x *BulkPlayerRecord) Reset() {
	*x = BulkPlayerRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkPlayerRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkPlayerRecord) ProtoMessage() {}

func (x *BulkPlayerRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkPlayerRecord.ProtoReflect.Descriptor instead.
func (*BulkPlayerRecord) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{4}
}

func (x *BulkPlayerRecord) GetPlayerRecords() []*PlayerRecord {
	if x != nil {
		return x.PlayerRecords
	}
	return nil
}

type AdminGameRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// payload is map of string object
	Payload   []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updatedAt,proto3,oneof" json:"updatedAt,omitempty"`
}

func (x *AdminGameRecord) Reset() {
	*x = AdminGameRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGameRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGameRecord) ProtoMessage() {}

func (x *AdminGameRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGameRecord.ProtoReflect.Descriptor instead.
func (*AdminGameRecord) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{5}
}

func (x *AdminGameRecord) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AdminGameRecord) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AdminGameRecord) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *AdminGameRecord) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AdminGameRecord) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type BulkAdminGameRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminGameRecords []*AdminGameRecord `protobuf:"bytes,1,rep,name=adminGameRecords,proto3" json:"adminGameRecords,omitempty"`
}

func (x *BulkAdminGameRecord) Reset() {
	*x = BulkAdminGameRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAdminGameRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAdminGameRecord) ProtoMessage() {}

func (x *BulkAdminGameRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAdminGameRecord.ProtoReflect.Descriptor instead.
func (*BulkAdminGameRecord) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{6}
}

func (x *BulkAdminGameRecord) GetAdminGameRecords() []*AdminGameRecord {
	if x != nil {
		return x.AdminGameRecords
	}
	return nil
}

type AdminPlayerRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// payload is map of string object
	Payload   []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UserId    string                 `protobuf:"bytes,5,opt,name=userId,proto3" json:"userId,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updatedAt,proto3,oneof" json:"updatedAt,omitempty"`
}

func (x *AdminPlayerRecord) Reset() {
	*x = AdminPlayerRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminPlayerRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminPlayerRecord) ProtoMessage() {}

func (x *AdminPlayerRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminPlayerRecord.ProtoReflect.Descriptor instead.
func (*AdminPlayerRecord) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{7}
}

func (x *AdminPlayerRecord) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AdminPlayerRecord) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AdminPlayerRecord) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *AdminPlayerRecord) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AdminPlayerRecord) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AdminPlayerRecord) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type BulkAdminPlayerRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminPlayerRecords []*AdminPlayerRecord `protobuf:"bytes,1,rep,name=adminPlayerRecords,proto3" json:"adminPlayerRecords,omitempty"`
}

func (x *BulkAdminPlayerRecord) Reset() {
	*x = BulkAdminPlayerRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAdminPlayerRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAdminPlayerRecord) ProtoMessage() {}

func (x *BulkAdminPlayerRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAdminPlayerRecord.ProtoReflect.Descriptor instead.
func (*BulkAdminPlayerRecord) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{8}
}

func (x *BulkAdminPlayerRecord) GetAdminPlayerRecords() []*AdminPlayerRecord {
	if x != nil {
		return x.AdminPlayerRecords
	}
	return nil
}

type BinaryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url is an URL to get the binary record
	Url         string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Version     int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	ContentType string                 `protobuf:"bytes,3,opt,name=contentType,proto3" json:"contentType,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updatedAt,proto3,oneof" json:"updatedAt,omitempty"`
}

func (x *BinaryInfo) Reset() {
	*x = BinaryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryInfo) ProtoMessage() {}

func (x *BinaryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryInfo.ProtoReflect.Descriptor instead.
func (*BinaryInfo) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{9}
}

func (x *BinaryInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BinaryInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BinaryInfo) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *BinaryInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BinaryInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GameBinaryRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Namespace  string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	BinaryInfo *BinaryInfo            `protobuf:"bytes,3,opt,name=binaryInfo,proto3,oneof" json:"binaryInfo,omitempty"`
	SetBy      string                 `protobuf:"bytes,4,opt,name=setBy,proto3" json:"setBy,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updatedAt,proto3,oneof" json:"updatedAt,omitempty"`
	TtlConfig  *TTLConfig             `protobuf:"bytes,7,opt,name=ttlConfig,proto3,oneof" json:"ttlConfig,omitempty"`
}

func (x *GameBinaryRecord) Reset() {
	*x = GameBinaryRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameBinaryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameBinaryRecord) ProtoMessage() {}

func (x *GameBinaryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameBinaryRecord.ProtoReflect.Descriptor instead.
func (*GameBinaryRecord) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{10}
}

func (x *GameBinaryRecord) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GameBinaryRecord) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GameBinaryRecord) GetBinaryInfo() *BinaryInfo {
	if x != nil {
		return x.BinaryInfo
	}
	return nil
}

func (x *GameBinaryRecord) GetSetBy() string {
	if x != nil {
		return x.SetBy
	}
	return ""
}

func (x *GameBinaryRecord) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GameBinaryRecord) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GameBinaryRecord) GetTtlConfig() *TTLConfig {
	if x != nil {
		return x.TtlConfig
	}
	return nil
}

type BulkGameBinaryRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameBinaryRecords []*GameBinaryRecord `protobuf:"bytes,1,rep,name=gameBinaryRecords,proto3" json:"gameBinaryRecords,omitempty"`
}

func (x *BulkGameBinaryRecord) Reset() {
	*x = BulkGameBinaryRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkGameBinaryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkGameBinaryRecord) ProtoMessage() {}

func (x *BulkGameBinaryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkGameBinaryRecord.ProtoReflect.Descriptor instead.
func (*BulkGameBinaryRecord) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{11}
}

func (x *BulkGameBinaryRecord) GetGameBinaryRecords() []*GameBinaryRecord {
	if x != nil {
		return x.GameBinaryRecords
	}
	return nil
}

type PlayerBinaryRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key             string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Namespace       string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	BinaryInfo      *BinaryInfo            `protobuf:"bytes,3,opt,name=binaryInfo,proto3" json:"binaryInfo,omitempty"`
	SetBy           string                 `protobuf:"bytes,4,opt,name=setBy,proto3" json:"setBy,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UserId          string                 `protobuf:"bytes,6,opt,name=userId,proto3" json:"userId,omitempty"`
	IsPublic        bool                   `protobuf:"varint,7,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updatedAt,proto3,oneof" json:"updatedAt,omitempty"`
	RequesterUserId *string                `protobuf:"bytes,9,opt,name=requesterUserId,proto3,oneof" json:"requesterUserId,omitempty"`
}

func (x *PlayerBinaryRecord) Reset() {
	*x = PlayerBinaryRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBinaryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBinaryRecord) ProtoMessage() {}

func (x *PlayerBinaryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBinaryRecord.ProtoReflect.Descriptor instead.
func (*PlayerBinaryRecord) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{12}
}

func (x *PlayerBinaryRecord) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PlayerBinaryRecord) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PlayerBinaryRecord) GetBinaryInfo() *BinaryInfo {
	if x != nil {
		return x.BinaryInfo
	}
	return nil
}

func (x *PlayerBinaryRecord) GetSetBy() string {
	if x != nil {
		return x.SetBy
	}
	return ""
}

func (x *PlayerBinaryRecord) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PlayerBinaryRecord) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PlayerBinaryRecord) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *PlayerBinaryRecord) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PlayerBinaryRecord) GetRequesterUserId() string {
	if x != nil && x.RequesterUserId != nil {
		return *x.RequesterUserId
	}
	return ""
}

type BulkPlayerBinaryRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerBinaryRecords []*PlayerBinaryRecord `protobuf:"bytes,1,rep,name=playerBinaryRecords,proto3" json:"playerBinaryRecords,omitempty"`
}

func (x *BulkPlayerBinaryRecord) Reset() {
	*x = BulkPlayerBinaryRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkPlayerBinaryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkPlayerBinaryRecord) ProtoMessage() {}

func (x *BulkPlayerBinaryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkPlayerBinaryRecord.ProtoReflect.Descriptor instead.
func (*BulkPlayerBinaryRecord) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{13}
}

func (x *BulkPlayerBinaryRecord) GetPlayerBinaryRecords() []*PlayerBinaryRecord {
	if x != nil {
		return x.PlayerBinaryRecords
	}
	return nil
}

type GameRecordValidationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess bool   `protobuf:"varint,1,opt,name=isSuccess,proto3" json:"isSuccess,omitempty"`
	Key       string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Error     *Error `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *GameRecordValidationResult) Reset() {
	*x = GameRecordValidationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRecordValidationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRecordValidationResult) ProtoMessage() {}

func (x *GameRecordValidationResult) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRecordValidationResult.ProtoReflect.Descriptor instead.
func (*GameRecordValidationResult) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{14}
}

func (x *GameRecordValidationResult) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *GameRecordValidationResult) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GameRecordValidationResult) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type BulkGameRecordValidationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidationResults []*GameRecordValidationResult `protobuf:"bytes,1,rep,name=validationResults,proto3" json:"validationResults,omitempty"`
}

func (x *BulkGameRecordValidationResult) Reset() {
	*x = BulkGameRecordValidationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkGameRecordValidationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkGameRecordValidationResult) ProtoMessage() {}

func (x *BulkGameRecordValidationResult) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkGameRecordValidationResult.ProtoReflect.Descriptor instead.
func (*BulkGameRecordValidationResult) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{15}
}

func (x *BulkGameRecordValidationResult) GetValidationResults() []*GameRecordValidationResult {
	if x != nil {
		return x.ValidationResults
	}
	return nil
}

type PlayerRecordValidationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess bool   `protobuf:"varint,1,opt,name=isSuccess,proto3" json:"isSuccess,omitempty"`
	Key       string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	UserId    string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Error     *Error `protobuf:"bytes,4,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *PlayerRecordValidationResult) Reset() {
	*x = PlayerRecordValidationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRecordValidationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRecordValidationResult) ProtoMessage() {}

func (x *PlayerRecordValidationResult) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRecordValidationResult.ProtoReflect.Descriptor instead.
func (*PlayerRecordValidationResult) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{16}
}

func (x *PlayerRecordValidationResult) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *PlayerRecordValidationResult) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PlayerRecordValidationResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PlayerRecordValidationResult) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type BulkPlayerRecordValidationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidationResults []*PlayerRecordValidationResult `protobuf:"bytes,1,rep,name=validationResults,proto3" json:"validationResults,omitempty"`
}

func (x *BulkPlayerRecordValidationResult) Reset() {
	*x = BulkPlayerRecordValidationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkPlayerRecordValidationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkPlayerRecordValidationResult) ProtoMessage() {}

func (x *BulkPlayerRecordValidationResult) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkPlayerRecordValidationResult.ProtoReflect.Descriptor instead.
func (*BulkPlayerRecordValidationResult) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{17}
}

func (x *BulkPlayerRecordValidationResult) GetValidationResults() []*PlayerRecordValidationResult {
	if x != nil {
		return x.ValidationResults
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32  `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudsaveValidatorService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_cloudsaveValidatorService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_cloudsaveValidatorService_proto_rawDescGZIP(), []int{18}
}

func (x *Error) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *Error) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_cloudsaveValidatorService_proto protoreflect.FileDescriptor

var file_cloudsaveValidatorService_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x5d, 0x0a, 0x09, 0x54, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38,
	0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xce, 0x02, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x74,
	0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x74, 0x42, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x74, 0x74, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76,
	0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x09, 0x74, 0x74, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x74, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x5d, 0x0a, 0x0e, 0x42, 0x75, 0x6c, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x4b, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0xec, 0x02, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x65, 0x74, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x74, 0x42,
	0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12,
	0x3d, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x65, 0x0a, 0x10, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x51, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65,
	0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x71, 0x0a, 0x13, 0x42,
	0x75, 0x6c, 0x6b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x5a, 0x0a, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61,
	0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x10, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xfc,
	0x01, 0x0a, 0x11, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x79, 0x0a,
	0x15, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x60, 0x0a, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x0a, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3d, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x99, 0x03, 0x0a,
	0x10, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x74, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x65, 0x74, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x4b, 0x0a, 0x09, 0x74, 0x74, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x54, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x02, 0x52,
	0x09, 0x74, 0x74, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74,
	0x74, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x75, 0x0a, 0x14, 0x42, 0x75, 0x6c, 0x6b,
	0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x5d, 0x0a, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76,
	0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x11, 0x67, 0x61,
	0x6d, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0xa3, 0x03, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65,
	0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x74, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x65, 0x74, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x16, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x63, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61,
	0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x1a, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x89,
	0x01, 0x0a, 0x1e, 0x42, 0x75, 0x6c, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x67, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61,
	0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x1c, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8d,
	0x01, 0x0a, 0x20, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x69, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x49,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xbf, 0x0f, 0x0a, 0x19, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7d, 0x0a, 0x15, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x39, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76,
	0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x7b, 0x0a, 0x13, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x39, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x17, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x75, 0x6c,
	0x6b, 0x52, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x2d, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x42, 0x75, 0x6c, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x3d,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42,
	0x75, 0x6c, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x83, 0x01,
	0x0a, 0x17, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x3b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79,
	0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x15, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x3b, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65,
	0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x8d, 0x01, 0x0a, 0x19, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2f, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x3f, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79,
	0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x1a, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2e, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79,
	0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x39, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79,
	0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x8d, 0x01, 0x0a, 0x1c, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x30, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x1a, 0x3b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x89, 0x01, 0x0a, 0x1b, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x2f, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x1a, 0x39, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x87, 0x01,
	0x0a, 0x19, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2f, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76,
	0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x39, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61,
	0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x93, 0x01, 0x0a, 0x1d, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x33, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x47, 0x61,
	0x6d, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x3d,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42,
	0x75, 0x6c, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x8f, 0x01,
	0x0a, 0x1d, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x31, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x1a, 0x3b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x8d, 0x01, 0x0a, 0x1b, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x31, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x1a, 0x3b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x99, 0x01, 0x0a, 0x1f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x61,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x35, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x3f, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65,
	0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x68, 0x0a, 0x21, 0x6e,
	0x65, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x01, 0x5a, 0x21, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6e, 0x65,
	0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0xaa, 0x02, 0x1d, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x42, 0x79, 0x74,
	0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloudsaveValidatorService_proto_rawDescOnce sync.Once
	file_cloudsaveValidatorService_proto_rawDescData = file_cloudsaveValidatorService_proto_rawDesc
)

func file_cloudsaveValidatorService_proto_rawDescGZIP() []byte {
	file_cloudsaveValidatorService_proto_rawDescOnce.Do(func() {
		file_cloudsaveValidatorService_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloudsaveValidatorService_proto_rawDescData)
	})
	return file_cloudsaveValidatorService_proto_rawDescData
}

var file_cloudsaveValidatorService_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_cloudsaveValidatorService_proto_goTypes = []interface{}{
	(*TTLConfig)(nil),                        // 0: accelbyte.cloudsave.validator.TTLConfig
	(*GameRecord)(nil),                       // 1: accelbyte.cloudsave.validator.GameRecord
	(*BulkGameRecord)(nil),                   // 2: accelbyte.cloudsave.validator.BulkGameRecord
	(*PlayerRecord)(nil),                     // 3: accelbyte.cloudsave.validator.PlayerRecord
	(*BulkPlayerRecord)(nil),                 // 4: accelbyte.cloudsave.validator.BulkPlayerRecord
	(*AdminGameRecord)(nil),                  // 5: accelbyte.cloudsave.validator.AdminGameRecord
	(*BulkAdminGameRecord)(nil),              // 6: accelbyte.cloudsave.validator.BulkAdminGameRecord
	(*AdminPlayerRecord)(nil),                // 7: accelbyte.cloudsave.validator.AdminPlayerRecord
	(*BulkAdminPlayerRecord)(nil),            // 8: accelbyte.cloudsave.validator.BulkAdminPlayerRecord
	(*BinaryInfo)(nil),                       // 9: accelbyte.cloudsave.validator.BinaryInfo
	(*GameBinaryRecord)(nil),                 // 10: accelbyte.cloudsave.validator.GameBinaryRecord
	(*BulkGameBinaryRecord)(nil),             // 11: accelbyte.cloudsave.validator.BulkGameBinaryRecord
	(*PlayerBinaryRecord)(nil),               // 12: accelbyte.cloudsave.validator.PlayerBinaryRecord
	(*BulkPlayerBinaryRecord)(nil),           // 13: accelbyte.cloudsave.validator.BulkPlayerBinaryRecord
	(*GameRecordValidationResult)(nil),       // 14: accelbyte.cloudsave.validator.GameRecordValidationResult
	(*BulkGameRecordValidationResult)(nil),   // 15: accelbyte.cloudsave.validator.BulkGameRecordValidationResult
	(*PlayerRecordValidationResult)(nil),     // 16: accelbyte.cloudsave.validator.PlayerRecordValidationResult
	(*BulkPlayerRecordValidationResult)(nil), // 17: accelbyte.cloudsave.validator.BulkPlayerRecordValidationResult
	(*Error)(nil),                            // 18: accelbyte.cloudsave.validator.Error
	(*timestamppb.Timestamp)(nil),            // 19: google.protobuf.Timestamp
}
var file_cloudsaveValidatorService_proto_depIdxs = []int32{
	19, // 0: accelbyte.cloudsave.validator.TTLConfig.expiresAt:type_name -> google.protobuf.Timestamp
	19, // 1: accelbyte.cloudsave.validator.GameRecord.createdAt:type_name -> google.protobuf.Timestamp
	19, // 2: accelbyte.cloudsave.validator.GameRecord.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 3: accelbyte.cloudsave.validator.GameRecord.ttlConfig:type_name -> accelbyte.cloudsave.validator.TTLConfig
	1,  // 4: accelbyte.cloudsave.validator.BulkGameRecord.gameRecords:type_name -> accelbyte.cloudsave.validator.GameRecord
	19, // 5: accelbyte.cloudsave.validator.PlayerRecord.createdAt:type_name -> google.protobuf.Timestamp
	19, // 6: accelbyte.cloudsave.validator.PlayerRecord.updatedAt:type_name -> google.protobuf.Timestamp
	3,  // 7: accelbyte.cloudsave.validator.BulkPlayerRecord.playerRecords:type_name -> accelbyte.cloudsave.validator.PlayerRecord
	19, // 8: accelbyte.cloudsave.validator.AdminGameRecord.createdAt:type_name -> google.protobuf.Timestamp
	19, // 9: accelbyte.cloudsave.validator.AdminGameRecord.updatedAt:type_name -> google.protobuf.Timestamp
	5,  // 10: accelbyte.cloudsave.validator.BulkAdminGameRecord.adminGameRecords:type_name -> accelbyte.cloudsave.validator.AdminGameRecord
	19, // 11: accelbyte.cloudsave.validator.AdminPlayerRecord.createdAt:type_name -> google.protobuf.Timestamp
	19, // 12: accelbyte.cloudsave.validator.AdminPlayerRecord.updatedAt:type_name -> google.protobuf.Timestamp
	7,  // 13: accelbyte.cloudsave.validator.BulkAdminPlayerRecord.adminPlayerRecords:type_name -> accelbyte.cloudsave.validator.AdminPlayerRecord
	19, // 14: accelbyte.cloudsave.validator.BinaryInfo.createdAt:type_name -> google.protobuf.Timestamp
	19, // 15: accelbyte.cloudsave.validator.BinaryInfo.updatedAt:type_name -> google.protobuf.Timestamp
	9,  // 16: accelbyte.cloudsave.validator.GameBinaryRecord.binaryInfo:type_name -> accelbyte.cloudsave.validator.BinaryInfo
	19, // 17: accelbyte.cloudsave.validator.GameBinaryRecord.createdAt:type_name -> google.protobuf.Timestamp
	19, // 18: accelbyte.cloudsave.validator.GameBinaryRecord.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 19: accelbyte.cloudsave.validator.GameBinaryRecord.ttlConfig:type_name -> accelbyte.cloudsave.validator.TTLConfig
	10, // 20: accelbyte.cloudsave.validator.BulkGameBinaryRecord.gameBinaryRecords:type_name -> accelbyte.cloudsave.validator.GameBinaryRecord
	9,  // 21: accelbyte.cloudsave.validator.PlayerBinaryRecord.binaryInfo:type_name -> accelbyte.cloudsave.validator.BinaryInfo
	19, // 22: accelbyte.cloudsave.validator.PlayerBinaryRecord.createdAt:type_name -> google.protobuf.Timestamp
	19, // 23: accelbyte.cloudsave.validator.PlayerBinaryRecord.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 24: accelbyte.cloudsave.validator.BulkPlayerBinaryRecord.playerBinaryRecords:type_name -> accelbyte.cloudsave.validator.PlayerBinaryRecord
	18, // 25: accelbyte.cloudsave.validator.GameRecordValidationResult.error:type_name -> accelbyte.cloudsave.validator.Error
	14, // 26: accelbyte.cloudsave.validator.BulkGameRecordValidationResult.validationResults:type_name -> accelbyte.cloudsave.validator.GameRecordValidationResult
	18, // 27: accelbyte.cloudsave.validator.PlayerRecordValidationResult.error:type_name -> accelbyte.cloudsave.validator.Error
	16, // 28: accelbyte.cloudsave.validator.BulkPlayerRecordValidationResult.validationResults:type_name -> accelbyte.cloudsave.validator.PlayerRecordValidationResult
	1,  // 29: accelbyte.cloudsave.validator.CloudsaveValidatorService.BeforeWriteGameRecord:input_type -> accelbyte.cloudsave.validator.GameRecord
	1,  // 30: accelbyte.cloudsave.validator.CloudsaveValidatorService.AfterReadGameRecord:input_type -> accelbyte.cloudsave.validator.GameRecord
	2,  // 31: accelbyte.cloudsave.validator.CloudsaveValidatorService.AfterBulkReadGameRecord:input_type -> accelbyte.cloudsave.validator.BulkGameRecord
	3,  // 32: accelbyte.cloudsave.validator.CloudsaveValidatorService.BeforeWritePlayerRecord:input_type -> accelbyte.cloudsave.validator.PlayerRecord
	3,  // 33: accelbyte.cloudsave.validator.CloudsaveValidatorService.AfterReadPlayerRecord:input_type -> accelbyte.cloudsave.validator.PlayerRecord
	4,  // 34: accelbyte.cloudsave.validator.CloudsaveValidatorService.AfterBulkReadPlayerRecord:input_type -> accelbyte.cloudsave.validator.BulkPlayerRecord
	5,  // 35: accelbyte.cloudsave.validator.CloudsaveValidatorService.BeforeWriteAdminGameRecord:input_type -> accelbyte.cloudsave.validator.AdminGameRecord
	7,  // 36: accelbyte.cloudsave.validator.CloudsaveValidatorService.BeforeWriteAdminPlayerRecord:input_type -> accelbyte.cloudsave.validator.AdminPlayerRecord
	10, // 37: accelbyte.cloudsave.validator.CloudsaveValidatorService.BeforeWriteGameBinaryRecord:input_type -> accelbyte.cloudsave.validator.GameBinaryRecord
	10, // 38: accelbyte.cloudsave.validator.CloudsaveValidatorService.AfterReadGameBinaryRecord:input_type -> accelbyte.cloudsave.validator.GameBinaryRecord
	11, // 39: accelbyte.cloudsave.validator.CloudsaveValidatorService.AfterBulkReadGameBinaryRecord:input_type -> accelbyte.cloudsave.validator.BulkGameBinaryRecord
	12, // 40: accelbyte.cloudsave.validator.CloudsaveValidatorService.BeforeWritePlayerBinaryRecord:input_type -> accelbyte.cloudsave.validator.PlayerBinaryRecord
	12, // 41: accelbyte.cloudsave.validator.CloudsaveValidatorService.AfterReadPlayerBinaryRecord:input_type -> accelbyte.cloudsave.validator.PlayerBinaryRecord
	13, // 42: accelbyte.cloudsave.validator.CloudsaveValidatorService.AfterBulkReadPlayerBinaryRecord:input_type -> accelbyte.cloudsave.validator.BulkPlayerBinaryRecord
	14, // 43: accelbyte.cloudsave.validator.CloudsaveValidatorService.BeforeWriteGameRecord:output_type -> accelbyte.cloudsave.validator.GameRecordValidationResult
	14, // 44: accelbyte.cloudsave.validator.CloudsaveValidatorService.AfterReadGameRecord:output_type -> accelbyte.cloudsave.validator.GameRecordValidationResult
	15, // 45: accelbyte.cloudsave.validator.CloudsaveValidatorService.AfterBulkReadGameRecord:output_type -> accelbyte.cloudsave.validator.BulkGameRecordValidationResult
	16, // 46: accelbyte.cloudsave.validator.CloudsaveValidatorService.BeforeWritePlayerRecord:output_type -> accelbyte.cloudsave.validator.PlayerRecordValidationResult
	16, // 47: accelbyte.cloudsave.validator.CloudsaveValidatorService.AfterReadPlayerRecord:output_type -> accelbyte.cloudsave.validator.PlayerRecordValidationResult
	17, // 48: accelbyte.cloudsave.validator.CloudsaveValidatorService.AfterBulkReadPlayerRecord:output_type -> accelbyte.cloudsave.validator.BulkPlayerRecordValidationResult
	14, // 49: accelbyte.cloudsave.validator.CloudsaveValidatorService.BeforeWriteAdminGameRecord:output_type -> accelbyte.cloudsave.validator.GameRecordValidationResult
	16, // 50: accelbyte.cloudsave.validator.CloudsaveValidatorService.BeforeWriteAdminPlayerRecord:output_type -> accelbyte.cloudsave.validator.PlayerRecordValidationResult
	14, // 51: accelbyte.cloudsave.validator.CloudsaveValidatorService.BeforeWriteGameBinaryRecord:output_type -> accelbyte.cloudsave.validator.GameRecordValidationResult
	14, // 52: accelbyte.cloudsave.validator.CloudsaveValidatorService.AfterReadGameBinaryRecord:output_type -> accelbyte.cloudsave.validator.GameRecordValidationResult
	15, // 53: accelbyte.cloudsave.validator.CloudsaveValidatorService.AfterBulkReadGameBinaryRecord:output_type -> accelbyte.cloudsave.validator.BulkGameRecordValidationResult
	16, // 54: accelbyte.cloudsave.validator.CloudsaveValidatorService.BeforeWritePlayerBinaryRecord:output_type -> accelbyte.cloudsave.validator.PlayerRecordValidationResult
	16, // 55: accelbyte.cloudsave.validator.CloudsaveValidatorService.AfterReadPlayerBinaryRecord:output_type -> accelbyte.cloudsave.validator.PlayerRecordValidationResult
	17, // 56: accelbyte.cloudsave.validator.CloudsaveValidatorService.AfterBulkReadPlayerBinaryRecord:output_type -> accelbyte.cloudsave.validator.BulkPlayerRecordValidationResult
	43, // [43:57] is the sub-list for method output_type
	29, // [29:43] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_cloudsaveValidatorService_proto_init() }
func file_cloudsaveValidatorService_proto_init() {
	if File_cloudsaveValidatorService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloudsaveValidatorService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTLConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkGameRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkPlayerRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGameRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAdminGameRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminPlayerRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAdminPlayerRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameBinaryRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkGameBinaryRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBinaryRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkPlayerBinaryRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameRecordValidationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkGameRecordValidationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRecordValidationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkPlayerRecordValidationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudsaveValidatorService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloudsaveValidatorService_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_cloudsaveValidatorService_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_cloudsaveValidatorService_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_cloudsaveValidatorService_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_cloudsaveValidatorService_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_cloudsaveValidatorService_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_cloudsaveValidatorService_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_cloudsaveValidatorService_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_cloudsaveValidatorService_proto_msgTypes[16].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloudsaveValidatorService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cloudsaveValidatorService_proto_goTypes,
		DependencyIndexes: file_cloudsaveValidatorService_proto_depIdxs,
		MessageInfos:      file_cloudsaveValidatorService_proto_msgTypes,
	}.Build()
	File_cloudsaveValidatorService_proto = out.File
	file_cloudsaveValidatorService_proto_rawDesc = nil
	file_cloudsaveValidatorService_proto_goTypes = nil
	file_cloudsaveValidatorService_proto_depIdxs = nil
}
