// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: cloudsaveValidatorService.proto

package validator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudsaveValidatorService_BeforeWriteGameRecord_FullMethodName           = "/accelbyte.cloudsave.validator.CloudsaveValidatorService/BeforeWriteGameRecord"
	CloudsaveValidatorService_AfterReadGameRecord_FullMethodName             = "/accelbyte.cloudsave.validator.CloudsaveValidatorService/AfterReadGameRecord"
	CloudsaveValidatorService_AfterBulkReadGameRecord_FullMethodName         = "/accelbyte.cloudsave.validator.CloudsaveValidatorService/AfterBulkReadGameRecord"
	CloudsaveValidatorService_BeforeWritePlayerRecord_FullMethodName         = "/accelbyte.cloudsave.validator.CloudsaveValidatorService/BeforeWritePlayerRecord"
	CloudsaveValidatorService_AfterReadPlayerRecord_FullMethodName           = "/accelbyte.cloudsave.validator.CloudsaveValidatorService/AfterReadPlayerRecord"
	CloudsaveValidatorService_AfterBulkReadPlayerRecord_FullMethodName       = "/accelbyte.cloudsave.validator.CloudsaveValidatorService/AfterBulkReadPlayerRecord"
	CloudsaveValidatorService_BeforeWriteAdminGameRecord_FullMethodName      = "/accelbyte.cloudsave.validator.CloudsaveValidatorService/BeforeWriteAdminGameRecord"
	CloudsaveValidatorService_BeforeWriteAdminPlayerRecord_FullMethodName    = "/accelbyte.cloudsave.validator.CloudsaveValidatorService/BeforeWriteAdminPlayerRecord"
	CloudsaveValidatorService_BeforeWriteGameBinaryRecord_FullMethodName     = "/accelbyte.cloudsave.validator.CloudsaveValidatorService/BeforeWriteGameBinaryRecord"
	CloudsaveValidatorService_AfterReadGameBinaryRecord_FullMethodName       = "/accelbyte.cloudsave.validator.CloudsaveValidatorService/AfterReadGameBinaryRecord"
	CloudsaveValidatorService_AfterBulkReadGameBinaryRecord_FullMethodName   = "/accelbyte.cloudsave.validator.CloudsaveValidatorService/AfterBulkReadGameBinaryRecord"
	CloudsaveValidatorService_BeforeWritePlayerBinaryRecord_FullMethodName   = "/accelbyte.cloudsave.validator.CloudsaveValidatorService/BeforeWritePlayerBinaryRecord"
	CloudsaveValidatorService_AfterReadPlayerBinaryRecord_FullMethodName     = "/accelbyte.cloudsave.validator.CloudsaveValidatorService/AfterReadPlayerBinaryRecord"
	CloudsaveValidatorService_AfterBulkReadPlayerBinaryRecord_FullMethodName = "/accelbyte.cloudsave.validator.CloudsaveValidatorService/AfterBulkReadPlayerBinaryRecord"
)

// CloudsaveValidatorServiceClient is the client API for CloudsaveValidatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudsaveValidatorServiceClient interface {
	// game record
	BeforeWriteGameRecord(ctx context.Context, in *GameRecord, opts ...grpc.CallOption) (*GameRecordValidationResult, error)
	AfterReadGameRecord(ctx context.Context, in *GameRecord, opts ...grpc.CallOption) (*GameRecordValidationResult, error)
	AfterBulkReadGameRecord(ctx context.Context, in *BulkGameRecord, opts ...grpc.CallOption) (*BulkGameRecordValidationResult, error)
	// player record
	BeforeWritePlayerRecord(ctx context.Context, in *PlayerRecord, opts ...grpc.CallOption) (*PlayerRecordValidationResult, error)
	AfterReadPlayerRecord(ctx context.Context, in *PlayerRecord, opts ...grpc.CallOption) (*PlayerRecordValidationResult, error)
	AfterBulkReadPlayerRecord(ctx context.Context, in *BulkPlayerRecord, opts ...grpc.CallOption) (*BulkPlayerRecordValidationResult, error)
	// admin game record
	BeforeWriteAdminGameRecord(ctx context.Context, in *AdminGameRecord, opts ...grpc.CallOption) (*GameRecordValidationResult, error)
	// admin player record
	BeforeWriteAdminPlayerRecord(ctx context.Context, in *AdminPlayerRecord, opts ...grpc.CallOption) (*PlayerRecordValidationResult, error)
	// game binary record
	BeforeWriteGameBinaryRecord(ctx context.Context, in *GameBinaryRecord, opts ...grpc.CallOption) (*GameRecordValidationResult, error)
	AfterReadGameBinaryRecord(ctx context.Context, in *GameBinaryRecord, opts ...grpc.CallOption) (*GameRecordValidationResult, error)
	AfterBulkReadGameBinaryRecord(ctx context.Context, in *BulkGameBinaryRecord, opts ...grpc.CallOption) (*BulkGameRecordValidationResult, error)
	// player binary record
	BeforeWritePlayerBinaryRecord(ctx context.Context, in *PlayerBinaryRecord, opts ...grpc.CallOption) (*PlayerRecordValidationResult, error)
	AfterReadPlayerBinaryRecord(ctx context.Context, in *PlayerBinaryRecord, opts ...grpc.CallOption) (*PlayerRecordValidationResult, error)
	AfterBulkReadPlayerBinaryRecord(ctx context.Context, in *BulkPlayerBinaryRecord, opts ...grpc.CallOption) (*BulkPlayerRecordValidationResult, error)
}

type cloudsaveValidatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudsaveValidatorServiceClient(cc grpc.ClientConnInterface) CloudsaveValidatorServiceClient {
	return &cloudsaveValidatorServiceClient{cc}
}

func (c *cloudsaveValidatorServiceClient) BeforeWriteGameRecord(ctx context.Context, in *GameRecord, opts ...grpc.CallOption) (*GameRecordValidationResult, error) {
	out := new(GameRecordValidationResult)
	err := c.cc.Invoke(ctx, CloudsaveValidatorService_BeforeWriteGameRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsaveValidatorServiceClient) AfterReadGameRecord(ctx context.Context, in *GameRecord, opts ...grpc.CallOption) (*GameRecordValidationResult, error) {
	out := new(GameRecordValidationResult)
	err := c.cc.Invoke(ctx, CloudsaveValidatorService_AfterReadGameRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsaveValidatorServiceClient) AfterBulkReadGameRecord(ctx context.Context, in *BulkGameRecord, opts ...grpc.CallOption) (*BulkGameRecordValidationResult, error) {
	out := new(BulkGameRecordValidationResult)
	err := c.cc.Invoke(ctx, CloudsaveValidatorService_AfterBulkReadGameRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsaveValidatorServiceClient) BeforeWritePlayerRecord(ctx context.Context, in *PlayerRecord, opts ...grpc.CallOption) (*PlayerRecordValidationResult, error) {
	out := new(PlayerRecordValidationResult)
	err := c.cc.Invoke(ctx, CloudsaveValidatorService_BeforeWritePlayerRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsaveValidatorServiceClient) AfterReadPlayerRecord(ctx context.Context, in *PlayerRecord, opts ...grpc.CallOption) (*PlayerRecordValidationResult, error) {
	out := new(PlayerRecordValidationResult)
	err := c.cc.Invoke(ctx, CloudsaveValidatorService_AfterReadPlayerRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsaveValidatorServiceClient) AfterBulkReadPlayerRecord(ctx context.Context, in *BulkPlayerRecord, opts ...grpc.CallOption) (*BulkPlayerRecordValidationResult, error) {
	out := new(BulkPlayerRecordValidationResult)
	err := c.cc.Invoke(ctx, CloudsaveValidatorService_AfterBulkReadPlayerRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsaveValidatorServiceClient) BeforeWriteAdminGameRecord(ctx context.Context, in *AdminGameRecord, opts ...grpc.CallOption) (*GameRecordValidationResult, error) {
	out := new(GameRecordValidationResult)
	err := c.cc.Invoke(ctx, CloudsaveValidatorService_BeforeWriteAdminGameRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsaveValidatorServiceClient) BeforeWriteAdminPlayerRecord(ctx context.Context, in *AdminPlayerRecord, opts ...grpc.CallOption) (*PlayerRecordValidationResult, error) {
	out := new(PlayerRecordValidationResult)
	err := c.cc.Invoke(ctx, CloudsaveValidatorService_BeforeWriteAdminPlayerRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsaveValidatorServiceClient) BeforeWriteGameBinaryRecord(ctx context.Context, in *GameBinaryRecord, opts ...grpc.CallOption) (*GameRecordValidationResult, error) {
	out := new(GameRecordValidationResult)
	err := c.cc.Invoke(ctx, CloudsaveValidatorService_BeforeWriteGameBinaryRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsaveValidatorServiceClient) AfterReadGameBinaryRecord(ctx context.Context, in *GameBinaryRecord, opts ...grpc.CallOption) (*GameRecordValidationResult, error) {
	out := new(GameRecordValidationResult)
	err := c.cc.Invoke(ctx, CloudsaveValidatorService_AfterReadGameBinaryRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsaveValidatorServiceClient) AfterBulkReadGameBinaryRecord(ctx context.Context, in *BulkGameBinaryRecord, opts ...grpc.CallOption) (*BulkGameRecordValidationResult, error) {
	out := new(BulkGameRecordValidationResult)
	err := c.cc.Invoke(ctx, CloudsaveValidatorService_AfterBulkReadGameBinaryRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsaveValidatorServiceClient) BeforeWritePlayerBinaryRecord(ctx context.Context, in *PlayerBinaryRecord, opts ...grpc.CallOption) (*PlayerRecordValidationResult, error) {
	out := new(PlayerRecordValidationResult)
	err := c.cc.Invoke(ctx, CloudsaveValidatorService_BeforeWritePlayerBinaryRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsaveValidatorServiceClient) AfterReadPlayerBinaryRecord(ctx context.Context, in *PlayerBinaryRecord, opts ...grpc.CallOption) (*PlayerRecordValidationResult, error) {
	out := new(PlayerRecordValidationResult)
	err := c.cc.Invoke(ctx, CloudsaveValidatorService_AfterReadPlayerBinaryRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudsaveValidatorServiceClient) AfterBulkReadPlayerBinaryRecord(ctx context.Context, in *BulkPlayerBinaryRecord, opts ...grpc.CallOption) (*BulkPlayerRecordValidationResult, error) {
	out := new(BulkPlayerRecordValidationResult)
	err := c.cc.Invoke(ctx, CloudsaveValidatorService_AfterBulkReadPlayerBinaryRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudsaveValidatorServiceServer is the server API for CloudsaveValidatorService service.
// All implementations must embed UnimplementedCloudsaveValidatorServiceServer
// for forward compatibility
type CloudsaveValidatorServiceServer interface {
	// game record
	BeforeWriteGameRecord(context.Context, *GameRecord) (*GameRecordValidationResult, error)
	AfterReadGameRecord(context.Context, *GameRecord) (*GameRecordValidationResult, error)
	AfterBulkReadGameRecord(context.Context, *BulkGameRecord) (*BulkGameRecordValidationResult, error)
	// player record
	BeforeWritePlayerRecord(context.Context, *PlayerRecord) (*PlayerRecordValidationResult, error)
	AfterReadPlayerRecord(context.Context, *PlayerRecord) (*PlayerRecordValidationResult, error)
	AfterBulkReadPlayerRecord(context.Context, *BulkPlayerRecord) (*BulkPlayerRecordValidationResult, error)
	// admin game record
	BeforeWriteAdminGameRecord(context.Context, *AdminGameRecord) (*GameRecordValidationResult, error)
	// admin player record
	BeforeWriteAdminPlayerRecord(context.Context, *AdminPlayerRecord) (*PlayerRecordValidationResult, error)
	// game binary record
	BeforeWriteGameBinaryRecord(context.Context, *GameBinaryRecord) (*GameRecordValidationResult, error)
	AfterReadGameBinaryRecord(context.Context, *GameBinaryRecord) (*GameRecordValidationResult, error)
	AfterBulkReadGameBinaryRecord(context.Context, *BulkGameBinaryRecord) (*BulkGameRecordValidationResult, error)
	// player binary record
	BeforeWritePlayerBinaryRecord(context.Context, *PlayerBinaryRecord) (*PlayerRecordValidationResult, error)
	AfterReadPlayerBinaryRecord(context.Context, *PlayerBinaryRecord) (*PlayerRecordValidationResult, error)
	AfterBulkReadPlayerBinaryRecord(context.Context, *BulkPlayerBinaryRecord) (*BulkPlayerRecordValidationResult, error)
	mustEmbedUnimplementedCloudsaveValidatorServiceServer()
}

// UnimplementedCloudsaveValidatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudsaveValidatorServiceServer struct {
}

func (UnimplementedCloudsaveValidatorServiceServer) BeforeWriteGameRecord(context.Context, *GameRecord) (*GameRecordValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeforeWriteGameRecord not implemented")
}
func (UnimplementedCloudsaveValidatorServiceServer) AfterReadGameRecord(context.Context, *GameRecord) (*GameRecordValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterReadGameRecord not implemented")
}
func (UnimplementedCloudsaveValidatorServiceServer) AfterBulkReadGameRecord(context.Context, *BulkGameRecord) (*BulkGameRecordValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterBulkReadGameRecord not implemented")
}
func (UnimplementedCloudsaveValidatorServiceServer) BeforeWritePlayerRecord(context.Context, *PlayerRecord) (*PlayerRecordValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeforeWritePlayerRecord not implemented")
}
func (UnimplementedCloudsaveValidatorServiceServer) AfterReadPlayerRecord(context.Context, *PlayerRecord) (*PlayerRecordValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterReadPlayerRecord not implemented")
}
func (UnimplementedCloudsaveValidatorServiceServer) AfterBulkReadPlayerRecord(context.Context, *BulkPlayerRecord) (*BulkPlayerRecordValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterBulkReadPlayerRecord not implemented")
}
func (UnimplementedCloudsaveValidatorServiceServer) BeforeWriteAdminGameRecord(context.Context, *AdminGameRecord) (*GameRecordValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeforeWriteAdminGameRecord not implemented")
}
func (UnimplementedCloudsaveValidatorServiceServer) BeforeWriteAdminPlayerRecord(context.Context, *AdminPlayerRecord) (*PlayerRecordValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeforeWriteAdminPlayerRecord not implemented")
}
func (UnimplementedCloudsaveValidatorServiceServer) BeforeWriteGameBinaryRecord(context.Context, *GameBinaryRecord) (*GameRecordValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeforeWriteGameBinaryRecord not implemented")
}
func (UnimplementedCloudsaveValidatorServiceServer) AfterReadGameBinaryRecord(context.Context, *GameBinaryRecord) (*GameRecordValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterReadGameBinaryRecord not implemented")
}
func (UnimplementedCloudsaveValidatorServiceServer) AfterBulkReadGameBinaryRecord(context.Context, *BulkGameBinaryRecord) (*BulkGameRecordValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterBulkReadGameBinaryRecord not implemented")
}
func (UnimplementedCloudsaveValidatorServiceServer) BeforeWritePlayerBinaryRecord(context.Context, *PlayerBinaryRecord) (*PlayerRecordValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeforeWritePlayerBinaryRecord not implemented")
}
func (UnimplementedCloudsaveValidatorServiceServer) AfterReadPlayerBinaryRecord(context.Context, *PlayerBinaryRecord) (*PlayerRecordValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterReadPlayerBinaryRecord not implemented")
}
func (UnimplementedCloudsaveValidatorServiceServer) AfterBulkReadPlayerBinaryRecord(context.Context, *BulkPlayerBinaryRecord) (*BulkPlayerRecordValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterBulkReadPlayerBinaryRecord not implemented")
}
func (UnimplementedCloudsaveValidatorServiceServer) mustEmbedUnimplementedCloudsaveValidatorServiceServer() {
}

// UnsafeCloudsaveValidatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudsaveValidatorServiceServer will
// result in compilation errors.
type UnsafeCloudsaveValidatorServiceServer interface {
	mustEmbedUnimplementedCloudsaveValidatorServiceServer()
}

func RegisterCloudsaveValidatorServiceServer(s grpc.ServiceRegistrar, srv CloudsaveValidatorServiceServer) {
	s.RegisterService(&CloudsaveValidatorService_ServiceDesc, srv)
}

func _CloudsaveValidatorService_BeforeWriteGameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsaveValidatorServiceServer).BeforeWriteGameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudsaveValidatorService_BeforeWriteGameRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsaveValidatorServiceServer).BeforeWriteGameRecord(ctx, req.(*GameRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsaveValidatorService_AfterReadGameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsaveValidatorServiceServer).AfterReadGameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudsaveValidatorService_AfterReadGameRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsaveValidatorServiceServer).AfterReadGameRecord(ctx, req.(*GameRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsaveValidatorService_AfterBulkReadGameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkGameRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsaveValidatorServiceServer).AfterBulkReadGameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudsaveValidatorService_AfterBulkReadGameRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsaveValidatorServiceServer).AfterBulkReadGameRecord(ctx, req.(*BulkGameRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsaveValidatorService_BeforeWritePlayerRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsaveValidatorServiceServer).BeforeWritePlayerRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudsaveValidatorService_BeforeWritePlayerRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsaveValidatorServiceServer).BeforeWritePlayerRecord(ctx, req.(*PlayerRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsaveValidatorService_AfterReadPlayerRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsaveValidatorServiceServer).AfterReadPlayerRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudsaveValidatorService_AfterReadPlayerRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsaveValidatorServiceServer).AfterReadPlayerRecord(ctx, req.(*PlayerRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsaveValidatorService_AfterBulkReadPlayerRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkPlayerRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsaveValidatorServiceServer).AfterBulkReadPlayerRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudsaveValidatorService_AfterBulkReadPlayerRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsaveValidatorServiceServer).AfterBulkReadPlayerRecord(ctx, req.(*BulkPlayerRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsaveValidatorService_BeforeWriteAdminGameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGameRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsaveValidatorServiceServer).BeforeWriteAdminGameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudsaveValidatorService_BeforeWriteAdminGameRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsaveValidatorServiceServer).BeforeWriteAdminGameRecord(ctx, req.(*AdminGameRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsaveValidatorService_BeforeWriteAdminPlayerRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminPlayerRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsaveValidatorServiceServer).BeforeWriteAdminPlayerRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudsaveValidatorService_BeforeWriteAdminPlayerRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsaveValidatorServiceServer).BeforeWriteAdminPlayerRecord(ctx, req.(*AdminPlayerRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsaveValidatorService_BeforeWriteGameBinaryRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameBinaryRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsaveValidatorServiceServer).BeforeWriteGameBinaryRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudsaveValidatorService_BeforeWriteGameBinaryRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsaveValidatorServiceServer).BeforeWriteGameBinaryRecord(ctx, req.(*GameBinaryRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsaveValidatorService_AfterReadGameBinaryRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameBinaryRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsaveValidatorServiceServer).AfterReadGameBinaryRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudsaveValidatorService_AfterReadGameBinaryRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsaveValidatorServiceServer).AfterReadGameBinaryRecord(ctx, req.(*GameBinaryRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsaveValidatorService_AfterBulkReadGameBinaryRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkGameBinaryRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsaveValidatorServiceServer).AfterBulkReadGameBinaryRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudsaveValidatorService_AfterBulkReadGameBinaryRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsaveValidatorServiceServer).AfterBulkReadGameBinaryRecord(ctx, req.(*BulkGameBinaryRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsaveValidatorService_BeforeWritePlayerBinaryRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerBinaryRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsaveValidatorServiceServer).BeforeWritePlayerBinaryRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudsaveValidatorService_BeforeWritePlayerBinaryRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsaveValidatorServiceServer).BeforeWritePlayerBinaryRecord(ctx, req.(*PlayerBinaryRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsaveValidatorService_AfterReadPlayerBinaryRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerBinaryRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsaveValidatorServiceServer).AfterReadPlayerBinaryRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudsaveValidatorService_AfterReadPlayerBinaryRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsaveValidatorServiceServer).AfterReadPlayerBinaryRecord(ctx, req.(*PlayerBinaryRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudsaveValidatorService_AfterBulkReadPlayerBinaryRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkPlayerBinaryRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudsaveValidatorServiceServer).AfterBulkReadPlayerBinaryRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudsaveValidatorService_AfterBulkReadPlayerBinaryRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudsaveValidatorServiceServer).AfterBulkReadPlayerBinaryRecord(ctx, req.(*BulkPlayerBinaryRecord))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudsaveValidatorService_ServiceDesc is the grpc.ServiceDesc for CloudsaveValidatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudsaveValidatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.cloudsave.validator.CloudsaveValidatorService",
	HandlerType: (*CloudsaveValidatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeforeWriteGameRecord",
			Handler:    _CloudsaveValidatorService_BeforeWriteGameRecord_Handler,
		},
		{
			MethodName: "AfterReadGameRecord",
			Handler:    _CloudsaveValidatorService_AfterReadGameRecord_Handler,
		},
		{
			MethodName: "AfterBulkReadGameRecord",
			Handler:    _CloudsaveValidatorService_AfterBulkReadGameRecord_Handler,
		},
		{
			MethodName: "BeforeWritePlayerRecord",
			Handler:    _CloudsaveValidatorService_BeforeWritePlayerRecord_Handler,
		},
		{
			MethodName: "AfterReadPlayerRecord",
			Handler:    _CloudsaveValidatorService_AfterReadPlayerRecord_Handler,
		},
		{
			MethodName: "AfterBulkReadPlayerRecord",
			Handler:    _CloudsaveValidatorService_AfterBulkReadPlayerRecord_Handler,
		},
		{
			MethodName: "BeforeWriteAdminGameRecord",
			Handler:    _CloudsaveValidatorService_BeforeWriteAdminGameRecord_Handler,
		},
		{
			MethodName: "BeforeWriteAdminPlayerRecord",
			Handler:    _CloudsaveValidatorService_BeforeWriteAdminPlayerRecord_Handler,
		},
		{
			MethodName: "BeforeWriteGameBinaryRecord",
			Handler:    _CloudsaveValidatorService_BeforeWriteGameBinaryRecord_Handler,
		},
		{
			MethodName: "AfterReadGameBinaryRecord",
			Handler:    _CloudsaveValidatorService_AfterReadGameBinaryRecord_Handler,
		},
		{
			MethodName: "AfterBulkReadGameBinaryRecord",
			Handler:    _CloudsaveValidatorService_AfterBulkReadGameBinaryRecord_Handler,
		},
		{
			MethodName: "BeforeWritePlayerBinaryRecord",
			Handler:    _CloudsaveValidatorService_BeforeWritePlayerBinaryRecord_Handler,
		},
		{
			MethodName: "AfterReadPlayerBinaryRecord",
			Handler:    _CloudsaveValidatorService_AfterReadPlayerBinaryRecord_Handler,
		},
		{
			MethodName: "AfterBulkReadPlayerBinaryRecord",
			Handler:    _CloudsaveValidatorService_AfterBulkReadPlayerBinaryRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudsaveValidatorService.proto",
}
